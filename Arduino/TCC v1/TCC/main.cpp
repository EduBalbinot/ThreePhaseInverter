 /*
  * TCC.cpp
  *
  * Created: 08/03/2023 08:26:16
  * Author : Eduardo Balbinot
  */ 
 #define F_CPU 16000000UL
 
 #include <avr/io.h>
 #include <avr/interrupt.h>
 #include <util/delay.h>
 
 #define Ma 1
 #define Mb 2
 #define Mc 3	
 #define AnalogIn 3
  
  #define _ponto float
  
   struct moment{
  	 _ponto counter;
  	 bool open;
  	 int port;
   };
   
int lim = 237;
struct moment a[238] = {
	{0.00450259,0,Mc},
	{0.00401668,0,Ma},
	{0.00167141,0,Mb},
	{0.00369350,1,Mb},
	{0.00506076,1,Ma},
	{0.00078151,1,Mc},
	{0.00542121,0,Mc},
	{0.00300210,0,Ma},
	{0.00243130,0,Mb},
	{0.00270115,1,Mb},
	{0.01249654,1,Ma},
	{0.00194494,0,Ma},
	{0.00331086,0,Mb},
	{0.00166094,1,Mb},
	{0.01368950,1,Ma},
	{0.00086278,0,Ma},
	{0.00429624,0,Mb},
	{0.00058852,1,Mb},
	{0.01459679,1,Ma},
	{0.00022673,0,Mb},
	{0.00464557,0,Ma},
	{0.00049957,1,Ma},
	{0.01407496,1,Mb},
	{0.00130624,0,Mb},
	{0.00362830,0,Ma},
	{0.00158612,1,Ma},
	{0.01289959,1,Mb},
	{0.00235898,0,Mb},
	{0.00271183,0,Ma},
	{0.00265358,1,Ma},
	{0.00570947,1,Mb},
	{0.00062727,1,Mc},
	{0.00534102,0,Mc},
	{0.00336895,0,Mb},
	{0.00191063,0,Ma},
	{0.00368430,1,Ma},
	{0.00481719,1,Mb},
	{0.00113826,1,Mc},
	{0.00447335,0,Mc},
	{0.00432123,0,Mb},
	{0.00123728,0,Ma},
	{0.00466088,1,Ma},
	{0.00385128,1,Mb},
	{0.00178921,1,Mc},
	{0.00353206,0,Mc},
	{0.00520205,0,Mb},
	{0.00070235,0,Ma},
	{0.00556654,1,Ma},
	{0.00282839,1,Mb},
	{0.00256993,1,Mc},
	{0.00253069,0,Mc},
	{0.01269867,0,Mb},
	{0.00176584,1,Mb},
	{0.00346814,1,Mc},
	{0.00148400,0,Mc},
	{0.01388309,0,Mb},
	{0.00068124,1,Mb},
	{0.00446969,1,Mc},
	{0.00040780,0,Mc},
	{0.01459772,0,Mb},
	{0.00040780,1,Mc},
	{0.00446969,1,Mb},
	{0.00068124,0,Mb},
	{0.01388309,0,Mc},
	{0.00148400,1,Mc},
	{0.00346814,1,Mb},
	{0.00176584,0,Mb},
	{0.01269867,0,Mc},
	{0.00253069,1,Mc},
	{0.00256993,1,Mb},
	{0.00282839,0,Mb},
	{0.00556654,0,Mc},
	{0.00070235,0,Ma},
	{0.00520205,1,Ma},
	{0.00353206,1,Mc},
	{0.00178921,1,Mb},
	{0.00385128,0,Mb},
	{0.00466088,0,Mc},
	{0.00123728,0,Ma},
	{0.00432123,1,Ma},
	{0.00447335,1,Mc},
	{0.00113826,1,Mb},
	{0.00481719,0,Mb},
	{0.00368430,0,Mc},
	{0.00191063,0,Ma},
	{0.00336895,1,Ma},
	{0.00534102,1,Mc},
	{0.00062727,1,Mb},
	{0.00570947,0,Mb},
	{0.00265358,0,Mc},
	{0.00271183,0,Ma},
	{0.00235898,1,Ma},
	{0.01289959,1,Mc},
	{0.00158612,0,Mc},
	{0.00362830,0,Ma},
	{0.00130624,1,Ma},
	{0.01407496,1,Mc},
	{0.00049957,0,Mc},
	{0.00464557,0,Ma},
	{0.00022673,1,Ma},
	{0.01459679,1,Mc},
	{0.00058852,0,Ma},
	{0.00429624,0,Mc},
	{0.00086278,1,Mc},
	{0.01368950,1,Ma},
	{0.00166094,0,Ma},
	{0.00331086,0,Mc},
	{0.00194494,1,Mc},
	{0.01249654,1,Ma},
	{0.00270115,0,Ma},
	{0.00243130,0,Mc},
	{0.00300210,1,Mc},
	{0.00542121,1,Ma},
	{0.00078151,1,Mb},
	{0.00506076,0,Mb},
	{0.00369350,0,Ma},
	{0.00167141,0,Mc},
	{0.00401668,1,Mc},
	{0.00450259,1,Ma},
	{0.00134015,1,Mb},
	{0.00416712,0,Mb},
	{0.00462342,0,Ma},
	{0.00104313,0,Mc},
	{0.00497145,1,Mc},
	{0.00351580,1,Ma},
	{0.00203560,1,Mb},
	{0.00320424,0,Mb},
	{0.00547759,0,Ma},
	{0.00055631,0,Mc},
	{0.00584990,1,Mc},
	{0.00247775,1,Ma},
	{0.00285694,1,Mb},
	{0.00218607,0,Mb},
	{0.01309923,0,Ma},
	{0.00140588,1,Ma},
	{0.00379126,1,Mb},
	{0.00112774,0,Mb},
	{0.01426502,0,Ma},
	{0.00031785,1,Ma},
	{0.00482381,1,Mb},
	{0.00004537,0,Mb},
	{0.01459401,0,Ma},
	{0.00076880,1,Mb},
	{0.00412531,1,Ma},
	{0.00104413,0,Ma},
	{0.01349427,0,Mb},
	{0.00183698,1,Mb},
	{0.00315652,1,Ma},
	{0.00212334,0,Ma},
	{0.01229329,0,Mb},
	{0.00287027,1,Mb},
	{0.00229599,1,Ma},
	{0.00317463,0,Ma},
	{0.00527354,0,Mb},
	{0.00086472,0,Mc},
	{0.00491718,1,Mc},
	{0.00385319,1,Mb},
	{0.00155726,1,Ma},
	{0.00418042,0,Ma},
	{0.00434242,0,Mb},
	{0.00144683,0,Mc},
	{0.00401109,1,Mc},
	{0.00477138,1,Mb},
	{0.00095194,1,Ma},
	{0.00512359,0,Ma},
	{0.00334589,0,Mb},
	{0.00216407,0,Mc},
	{0.00303799,1,Mc},
	{0.01208902,1,Mb},
	{0.00230097,0,Mb},
	{0.00300519,0,Mc},
	{0.00201204,1,Mc},
	{0.01329748,1,Mb},
	{0.00122519,0,Mb},
	{0.00395695,0,Mc},
	{0.00094856,1,Mc},
	{0.01445319,1,Mb},
	{0.00013618,0,Mb},
	{0.00486814,0,Mc},
	{0.00013618,1,Mb},
	{0.01445319,1,Mc},
	{0.00094856,0,Mc},
	{0.00395695,0,Mb},
	{0.00122519,1,Mb},
	{0.01329748,1,Mc},
	{0.00201204,0,Mc},
	{0.00300519,0,Mb},
	{0.00230097,1,Mb},
	{0.01208902,1,Mc},
	{0.00303799,0,Mc},
	{0.00216407,0,Mb},
	{0.00334589,1,Mb},
	{0.00512359,1,Mc},
	{0.00095194,1,Ma},
	{0.00477138,0,Ma},
	{0.00401109,0,Mc},
	{0.00144683,0,Mb},
	{0.00434242,1,Mb},
	{0.00418042,1,Mc},
	{0.00155726,1,Ma},
	{0.00385319,0,Ma},
	{0.00491718,0,Mc},
	{0.00086472,0,Mb},
	{0.00527354,1,Mb},
	{0.00317463,1,Mc},
	{0.00229599,1,Ma},
	{0.00287027,0,Ma},
	{0.01229329,0,Mc},
	{0.00212334,1,Mc},
	{0.00315652,1,Ma},
	{0.00183698,0,Ma},
	{0.01349427,0,Mc},
	{0.00104413,1,Mc},
	{0.00412531,1,Ma},
	{0.00076880,0,Ma},
	{0.01459401,0,Mc},
	{0.00004537,1,Ma},
	{0.00482381,1,Mc},
	{0.00031785,0,Mc},
	{0.01426502,0,Ma},
	{0.00112774,1,Ma},
	{0.00379126,1,Mc},
	{0.00140588,0,Mc},
	{0.01309923,0,Ma},
	{0.00218607,1,Ma},
	{0.00285694,1,Mc},
	{0.00247775,0,Mc},
	{0.00584990,0,Ma},
	{0.00055631,0,Mb},
	{0.00547759,1,Mb},
	{0.00320424,1,Ma},
	{0.00203560,1,Mc},
	{0.00351580,0,Mc},
	{0.00497145,0,Ma},
	{0.00104313,0,Mb},
	{0.00462342,1,Mb},
	{0.00416712,1,Ma},
	{0.00068060,1,Mc}};
		   
   int i = 1 ;
   long OC = 0;
   long lastADC = 0;
   
   ISR(TIMER1_COMPA_vect) {
  	 PORTB ^= (-a[i].open ^ PORTB) & (1 << a[i].port);
	 OC = (long) (a[i].counter * 180000); //180000 = 61.73Hz ; 450000 = 30.30Hz 
  	 TCNT1 = 0;
  	 OCR1A = OC;
	
  	 i++;
  	 if(i>lim)
  		i=0;
   }
 
 int main(void)
 {
    cli();  // Desabilita interrupções globais
  
    DDRB|=(1<<Ma) | (1<<Mb) | (1<<Mc);
	//DDRB|=(1<<PORTB5);//PB0 como saída
  
    TCCR1A = 0;   // Zera configurações do Timer 1
    TCCR1B = 0;   // Zera configurações do Timer 1
    TCNT1 = 0;    //Inicializa contador do Timer 1 em 0
    ICR1 = 65535;  
    TCCR1A |= (1 << WGM12);  // Ativa modo CTC (Clear Timer on Compare Match) para OCR1A
    TCCR1B |= (1 << CS10);   // Sem prescaler
    //TCCR1B |= (1 << CS10) | (1 << CS12); // Prescaler 1024
    TIMSK1 |= (1 << OCIE1A) ; // ativa interrupção dos comparadores
    OCR1A = 1000;  //<65536 //valor dos interrupt
    sei();  // Habilita interrupções globais
 
	ADCSRA|=(1<<ADEN);//habilita conversor AD
	ADCSRA|=(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2);//configura prescaler para 128
	ADMUX|=(1<<REFS0);//configura referencia do ADC para o VCC
	ADMUX&=0b11110000;//limpa o MUX
	ADMUX|=AnalogIn;//configura pra leitura do canal
	
     while (1) 
     {
		 ADCSRA|=(1<<ADSC);//inicia conversão
		 while(ADCSRA&(1<<ADSC));//aguarda ADSC voltar para 0
		 lastADC = (long) ADC * 4300;		
  		_delay_ms(1000);
     }
 }

